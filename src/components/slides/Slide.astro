---
import Default from "./Default.astro";
import Title from "./Title.astro";

export type Props = {
  title: string;
  type: "title" | undefined;
};

const props = Astro.props;
const { type } = Astro.props;
---

<div class="slide">
  {
    type === "title" ? (
      <Title {...props}>
        <slot />
      </Title>
    ) : (
      <Default {...props}>
        <slot />{" "}
      </Default>
    )
  }
</div>

<script>
  const resizeSlides = () => {
    if (document.querySelector("div.present")) {
      return;
    }
    const container = document.querySelector(
      ".slide-container"
    ) as HTMLDivElement;

    const slides = document.querySelectorAll(
      ".slide"
    ) as NodeListOf<HTMLDivElement>; // get all slides

    const scaleSlides = (scale: number) =>
      slides.forEach((slide) => {
        // The following sets the width and height according to scale
        slide.style.width = 480 * scale + "px";
        slide.style.height = 270 * scale + "px";
      });

    scaleSlides(1);
    const parentWidth = container.offsetWidth; // get the width of the container
    scaleSlides(parentWidth / 480);
  };

  resizeSlides();
  addEventListener("resize", resizeSlides);
</script>

<style lang="scss">
  .slide {
    height: 270px;
    width: 480px;
    border: 1px #999 solid;
    margin: auto;

    font-family: "Inter";

    display: flex;
  }
</style>

<style lang="scss" is:global>
  .slide {
    &-content {
      img {
        max-width: 95%;
        max-height: 200px;
        margin: auto;
      }

      p:has(> img) {
        text-align: center;
      }

      h3 {
        margin-block-start: 0.5rem;
        margin-block-end: 0;
      }
      p {
        margin: 0;
      }
      ul,
      ol {
        padding-left: 15px;
      }
    }
  }
  .present .slide {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 999;
  }
</style>

<script>
  const presentationState: {
    slideIndex: number;
    speakerNotesWindow: Window | null;
  } = {
    slideIndex: -1,
    speakerNotesWindow: null,
  };

  // @ts-ignore
  window.presentationState = presentationState;
  const slides = document.querySelectorAll(
    ".slide"
  ) as NodeListOf<HTMLDivElement>;
  const hide = (elt: HTMLElement | null) => {
    if (elt) {
      elt.style.display = "none";
    }
  };
  const show = (elt: HTMLElement | null) => {
    if (elt) {
      elt.style.display = "";
    }
  };
  const handleKeyDown = (e: KeyboardEvent) => {
    console.log(e.code);
    if (e.code === "ArrowRight") {
      present(presentationState.slideIndex + 1);
    } else if (e.code === "Space" || e.code === "ArrowLeft") {
      present(presentationState.slideIndex - 1);
    } else if (e.code === "Escape") {
      present(-1);
    }
  };
  function present(index: number | undefined) {
    if (index === undefined) {
      index = presentationState.slideIndex;
    }

    document.querySelectorAll("div.present").forEach((d) => d.remove());

    if (index < 0) {
      console.log("reset page");
      show(document.querySelector("nav"));
      show(document.querySelector("#main"));
      show(document.querySelector("footer"));
      window.removeEventListener("keydown", handleKeyDown);
      return;
    }
    if (presentationState.slideIndex < 0) {
      hide(document.querySelector("nav"));
      hide(document.querySelector("#main"));
      hide(document.querySelector("footer"));
      window.addEventListener("keydown", handleKeyDown);
      presentationState.speakerNotesWindow = window.open(
        undefined,
        "Slide",
        "popup"
      );
    }
    presentationState.slideIndex = index;

    const presentDiv = document.createElement("div");

    presentDiv.className = "present";
    const slide = slides[index];

    if (slide) {
      const text = [];
      let current = slide.nextElementSibling;
      while (current && current.tagName !== "DIV") {
        text.push(current);
        current = current.nextElementSibling;
      }
      console.log(text);
      if (presentationState.speakerNotesWindow) {
        presentationState.speakerNotesWindow.document.body.innerHTML = "";
      }
      text.forEach((t) => {
        presentationState.speakerNotesWindow?.document.body.appendChild(t);
      });
      presentDiv.appendChild(slide.cloneNode(true));
    }

    document.body.appendChild(presentDiv);
  }
  // @ts-ignore
  window.present = present;
</script>
